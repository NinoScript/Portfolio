// Generated by CoffeeScript 1.4.0
(function() {
    var $toD3, Bar, Barra, BaseD3Chart, ColorGenerator, CompoundRotatableChart, D3to$, Mark, MarkedBar, RotatableChart, añosMostrados, colorGen, __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        function ctor() {
            this.constructor = child;
        }
        for (var key in parent) __hasProp.call(parent, key) && (child[key] = parent[key]);
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child;
    };
    ColorGenerator = function() {
        function ColorGenerator(h, s, l) {
            h == null && (h = 0);
            s == null && (s = 100);
            l == null && (l = 50);
            this.h = h;
            this.s = s;
            this.l = l;
            this.g = .618033988749895;
        }
        ColorGenerator.prototype.nextColor = function() {
            return this.h = (this.h + this.g) % 1;
        };
        ColorGenerator.prototype.cssColorString = function() {
            return "hsl(" + this.h * 360 + ", " + this.s + "%, " + this.l + "%)";
        };
        ColorGenerator.prototype.getColor = function() {
            var lastColorString;
            lastColorString = this.cssColorString();
            this.nextColor();
            return lastColorString;
        };
        ColorGenerator.prototype.uniqueColorForIndex = function(i) {
            var _base, _ref;
            this.array == null && (this.array = []);
            return (_ref = (_base = this.array)[i]) != null ? _ref : _base[i] = this.getColor();
        };
        ColorGenerator.prototype.uniqueColorForKey = function(key) {
            var _base, _ref;
            this.object == null && (this.object = {});
            return (_ref = (_base = this.object)[key]) != null ? _ref : _base[key] = this.getColor();
        };
        return ColorGenerator;
    }();
    BaseD3Chart = function() {
        function BaseD3Chart() {
            this.end = __bind(this.end, this);
            this.update = __bind(this.update, this);
            this.enter = __bind(this.enter, this);
        }
        BaseD3Chart.prototype.enter = function(selection) {
            var self;
            self = this;
            return selection.each(function(d, i) {
                return self._enter(d3.select(this), d, i);
            });
        };
        BaseD3Chart.prototype.update = function(selection) {
            var self;
            self = this;
            return selection.each(function(d, i) {
                return self._update(d3.select(this), d, i);
            });
        };
        BaseD3Chart.prototype.end = function(selection) {
            var self;
            self = this;
            return selection.each(function(d, i) {
                return self._end(d3.select(this), d, i);
            });
        };
        BaseD3Chart.prototype._setup = function(elem, d, i) {
            throw "Not Implemented";
        };
        BaseD3Chart.prototype._update = function(elem, d, i) {
            throw "Not Implemented";
        };
        BaseD3Chart.prototype._end = function(elem, d, i) {
            throw "Not Implemented";
        };
        return BaseD3Chart;
    }();
    RotatableChart = function(_super) {
        function RotatableChart() {
            RotatableChart.__super__.constructor.apply(this, arguments);
            this.sentido("horizontal");
            this.size(100);
        }
        var ejes;
        __extends(RotatableChart, _super);
        ejes = {
            horizontal: [ "left", "right" ],
            vertical: [ "top", "bottom" ]
        };
        RotatableChart.prototype.sentido = function(value) {
            if (!arguments.length) return this._sentido;
            this._sentido = value;
            this._pos1 = ejes[this._sentido][0];
            this._pos2 = ejes[this._sentido][1];
            return this;
        };
        RotatableChart.prototype.size = function(value) {
            var domain, range;
            if (!arguments.length) return this._size;
            this._size = value;
            domain = [ 100, 0 ];
            range = [ 0, this._size ];
            this._scale_pos1 = d3.scale.linear().domain(domain).range(range);
            this._scale_pos2 = d3.scale.linear().domain(domain).range(range.reverse());
            return this;
        };
        return RotatableChart;
    }(BaseD3Chart);
    CompoundRotatableChart = function(_super) {
        function CompoundRotatableChart() {
            return CompoundRotatableChart.__super__.constructor.apply(this, arguments);
        }
        __extends(CompoundRotatableChart, _super);
        CompoundRotatableChart.prototype.sentido = function(value) {
            var key;
            CompoundRotatableChart.__super__.sentido.call(this, value);
            for (key in this.childs) this.childs[key].sentido(value);
            return this;
        };
        CompoundRotatableChart.prototype.size = function(value) {
            var key;
            CompoundRotatableChart.__super__.size.call(this, value);
            for (key in this.childs) this.childs[key].size(value);
            return this;
        };
        return CompoundRotatableChart;
    }(RotatableChart);
    Mark = function(_super) {
        function Mark() {
            return Mark.__super__.constructor.apply(this, arguments);
        }
        __extends(Mark, _super);
        Mark.prototype._enter = function(self, d, i) {
            return self.classed("mark", !0).style(this._pos1, this._scale_pos1(0) + "px");
        };
        Mark.prototype._update = function(self, d, i) {
            return self.transition().duration(1e3).style(this._pos1, this._scale_pos1(d) + "px");
        };
        return Mark;
    }(RotatableChart);
    Bar = function(_super) {
        function Bar() {
            return Bar.__super__.constructor.apply(this, arguments);
        }
        __extends(Bar, _super);
        Bar.prototype.min = function(d) {
            return this._scale_pos1.invert(Math.min(this._scale_pos1(d[0]), this._scale_pos1(d[1])));
        };
        Bar.prototype.max = function(d) {
            return this._scale_pos1.invert(Math.max(this._scale_pos1(d[0]), this._scale_pos1(d[1])));
        };
        Bar.prototype._enter = function(self, d, i) {
            return self.classed("bar", !0).style(this._pos1, this._scale_pos1(0) + "px").style(this._pos2, this._scale_pos2(0) + "px");
        };
        Bar.prototype._update = function(self, d, i) {
            var max, min;
            min = this.min(d);
            max = this.max(d);
            return self.transition().duration(1e3).style(this._pos1, this._scale_pos1(min) + "px").style(this._pos2, this._scale_pos2(max) + "px");
        };
        return Bar;
    }(RotatableChart);
    MarkedBar = function(_super) {
        function MarkedBar() {
            MarkedBar.__super__.constructor.apply(this, arguments);
            this.childs = {
                mark: new Mark,
                bar: new Bar
            };
            this.sentido("horizontal");
            this.size(100);
        }
        __extends(MarkedBar, _super);
        MarkedBar.prototype._enter = function(self, d, i) {
            self.append("div").datum(d.middle).call(this.childs.mark.enter);
            return self.append("div").datum([ d.val1, d.val2 ]).call(this.childs.bar.enter);
        };
        MarkedBar.prototype._update = function(self, d, i) {
            self.select(".mark").datum(d.middle).call(this.childs.mark.update);
            return self.select(".bar").datum([ d.val1, d.val2 ]).call(this.childs.bar.update);
        };
        return MarkedBar;
    }(CompoundRotatableChart);
    D3to$ = function(element) {
        return $(element[0][0]);
    };
    $toD3 = function(element) {
        return d3.select(element[0]);
    };
    añosMostrados = {};
    colorGen = new ColorGenerator(.2, 70, 60);
    Barra = function(_super) {
        function Barra() {
            Barra.__super__.constructor.apply(this, arguments);
            this.childs = {
                tope: new Mark
            };
            this.sentido("vertical");
            this.size(300);
        }
        __extends(Barra, _super);
        Barra.prototype._enter = function(self, d, i) {
            var barra, delta;
            self.classed("barra", !0);
            delta = {
                x: -1,
                y: 5
            };
            barra = self.append("div").datum(d.data).call(this.childs.tope.enter).style("background-color", colorGen.uniqueColorForIndex(d.seriesIndex));
            if (añosMostrados[d.yearIndex] === void 0 && d.data !== 0) {
                console.log(añosMostrados);
                añosMostrados[d.yearIndex] = self;
                self.append("div").classed("tick", !0).html("<p>" + d.year + "</p>");
            }
            return D3to$(barra).opentip("<p><strong>" + d.seriesName.split(" Expedition")[0] + ", " + d.year + "</strong></p>\n<p>" + d.data + "% success rate</p>", {
                tipJoint: "bottom",
                style: "dark",
                delay: 0,
                hideDelay: .3,
                showEffectDuration: 0,
                hideEffectDuration: 0,
                group: "bender"
            });
        };
        Barra.prototype._update = function(self, d, i) {
            return this.childs.tope._update(self.select(".mark"), d.data, i).duration(1e3).delay(i * 30 + d.seriesIndex * 300);
        };
        return Barra;
    }(CompoundRotatableChart);
    $(function() {
        var barra, global_container;
        global_container = d3.select(".grafico");
        barra = new Barra;
        return d3.json("../json/datos.mini.json", function(e, json) {
            var cuadrados, flat_data, p, w;
            flat_data = function() {
                var data, dataIndex, dataset, result, yearIndex, _i, _j, _len, _len1, _ref, _ref1;
                result = [];
                _ref = json.dataset;
                for (dataIndex = _i = 0, _len = _ref.length; _i < _len; dataIndex = ++_i) {
                    dataset = _ref[dataIndex];
                    _ref1 = dataset.data;
                    for (yearIndex = _j = 0, _len1 = _ref1.length; _j < _len1; yearIndex = ++_j) {
                        data = _ref1[yearIndex];
                        result.push({
                            data: data,
                            seriesName: dataset.seriesName,
                            seriesIndex: dataIndex,
                            year: json.categories[yearIndex],
                            yearIndex: yearIndex
                        });
                    }
                }
                return result.sort(function(a, b) {
                    var v;
                    v = function(d) {
                        return d.yearIndex * 100 + d.seriesIndex;
                    };
                    return d3.ascending(v(a), v(b));
                }).filter(function(d) {
                    return d.data !== 0;
                });
            }();
            w = 800 / flat_data.length;
            p = Math.round(100 / flat_data.length);
            return cuadrados = global_container.selectAll(".barra").data(flat_data).enter().append("div").call(barra.enter).call(barra.update).style("width", "" + w + "px").style("left", function(d, i) {
                return "" + i * (w + p) + "px";
            });
        });
    });
}).call(this);